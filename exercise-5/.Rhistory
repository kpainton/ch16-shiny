# UI for scatterplot
library(shiny)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames("mpg")
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# Get a vector of column names (from `mpg`) to use as select inputs
is.data.frame(mpg)
# Get a vector of column names (from `mpg`) to use as select inputs
is.data.frame("mpg")
# Get a vector of column names (from `mpg`) to use as select inputs
mpg <- data.frame(mpg)
# Get a vector of column names (from `mpg`) to use as select inputs
mpg <- data.frame("mpg")
View(mpg)
View(mpg)
# Get a vector of column names (from `mpg`) to use as select inputs
View(mpg)
library(ggplot2)
# Get a vector of column names (from `mpg`) to use as select inputs
View(mpg)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
ui <- fluidPage(
h1("Page Header"),
selectInput("x", label = "X variable"),
selectInput("y", label = "Y variable"),
sliderInput("size", label = "Size of point", min = 1, max = 10, value = 5),
selectInput("color", label = "Color", choices = list("Red" = "red", "Blue" = "blue", "Yellow" = "yellow")),
plotOutput("scatter"),
)
ui <- fluidPage(
h1("Page Header"),
selectInput("x", label = "X variable", choices = select_values),
selectInput("y", label = "Y variable", choices = select_values),
sliderInput("size", label = "Size of point", min = 1, max = 10, value = 5),
selectInput("color", label = "Color", choices = list("Red" = "red", "Blue" = "blue", "Yellow" = "yellow")),
plotOutput("scatter"),
)
ui <- fluidPage(
h1("Page Header"),
selectInput("x", label = "X variable", choices = select_values),
selectInput("y", label = "Y variable", choices = select_values),
sliderInput("size", label = "Size of point", min = 1, max = 10, value = 5),
selectInput("color", label = "Color", choices = list("Red" = "red", "Blue" = "blue", "Yellow" = "yellow")),
plotOutput("scatter"),
)
ui <- fluidPage(
h1("Page Header"),
selectInput("x", label = "X variable", choices = select_values),
selectInput("y", label = "Y variable", choices = select_values),
sliderInput("size", label = "Size of point", min = 1, max = 10, value = 5),
selectInput("color", label = "Color", choices = list("Red" = "red", "Blue" = "blue", "Yellow" = "yellow")),
plotOutput("scatter")
)
shinyUI(ui)
# Store x and y values to plot
server <- shinyServer(function(input, output)) {
output$scatter <- renderPlot({
x <- mpg[[input$x]]
y <- mpg[[input$y]]
title <- paste0("MPG Dataset: ", input$x, " v.s ", input$y)
p <- ggplot +
geom_point(mapping = aes(x = x, y = y), size = input$size, color = input$color) +
labs(x = input$x, y = input$y, title = title)
p
})
}
# Store x and y values to plot
server <- shinyServer(function(input, output)) {
output$scatter <- renderPlot({
x <- mpg[[input$x]]
y <- mpg[[input$y]]
title <- paste0("MPG Dataset: ", input$x, " v.s ", input$y)
p <- ggplot +
geom_point(mapping = aes(x = x, y = y), size = input$size, color = input$color) +
labs(x = input$x, y = input$y, title = title)
p
})
})
# Store x and y values to plot
server <- shinyServer(function(input, output)) {
# Store x and y values to plot
server <- shinyServer(function(input, output)) {
output$scatter <- renderPlot({
x <- mpg[[input$x]]
y <- mpg[[input$y]]
title <- paste0("MPG Dataset: ", input$x, " v.s ", input$y)
p <- ggplot() +
geom_point(mapping = aes(x = x, y = y), size = input$size, color = input$color) +
labs(x = input$x, y = input$y, title = title)
p
})
}
# Store x and y values to plot
server <- shinyServer(function(input, output) {
output$scatter <- renderPlot({
x <- mpg[[input$x]]
y <- mpg[[input$y]]
title <- paste0("MPG Dataset: ", input$x, " v.s ", input$y)
p <- ggplot() +
geom_point(mapping = aes(x = x, y = y), size = input$size, color = input$color) +
labs(x = input$x, y = input$y, title = title)
p
})
})
shinyServer(server)
runApp()
runApp()
# Get a vector of column names (from `mpg`) to use as select inputs
colnames(select_values) <- c("Make", "Model", "Engine Displacement", "Year", "# of Clyinders", "Type of Transmission", "Type of Drive", "City MPG", "HWY MPG", "fuel type", "Type of Car")
select_values <- colnames(mpg)
# Get a vector of column names (from `mpg`) to use as select inputs
colnames(mpg) <- c("Make", "Model", "Engine Displacement", "Year", "# of Clyinders", "Type of Transmission", "Type of Drive", "City MPG", "HWY MPG", "fuel type", "Type of Car")
select_values <- colnames(mpg)
ui <- fluidPage(
h1("Page Header"),
selectInput("x", label = "X variable", choices = select_values),
selectInput("y", label = "Y variable", choices = select_values),
sliderInput("size", label = "Size of point", min = 1, max = 10, value = 5),
selectInput("color", label = "Color", choices = list("Red" = "red", "Blue" = "blue", "Yellow" = "yellow")),
plotOutput("scatter")
)
shinyUI(ui)
# Store x and y values to plot
server <- shinyServer(function(input, output) {
output$scatter <- renderPlot({
x <- mpg[[input$x]]
y <- mpg[[input$y]]
title <- paste0("MPG Dataset: ", input$x, " v.s ", input$y)
p <- ggplot() +
geom_point(mapping = aes(x = x, y = y), size = input$size, color = input$color) +
labs(x = input$x, y = input$y, title = title)
p
})
})
shinyServer(server)
runApp()
runApp('~/Desktop/INFO/ch16-shiny/exercise-5')
shinyUI(navbarPage(
"Electoral College",
# Create a tab panel for your map
tabPanel(
"Map",
titlePanel("Electoral College Votes"),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput(
"mapvar",
label = "Variable to Map",
choices = list(
"Population" = "population",
"Electoral Votes" = "votes",
"Votes / Population" = "ratio"
)
)
),
# Main panel: display plotly map
mainPanel(
plotlyOutput("map")
)
)
),
tabPanel(
"Scatter",
titlePanel("Electoral College Votes"),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput(
"X Variable",
label = "X Variable",
choices = list(
"Population" = "population",
"Electoral Votes" = "votes",
"Votes / Population" = "ratio"
)
)
),
# Main panel: display plotly map
mainPanel(
plotlyOutput("plot")
)
)
)
# Create a tabPanel to show your scatter plot
))
# Start shinyServer
shinyServer(function(input, output) {
# Render a plotly object that returns your map
output$map <- renderPlotly({
return(build_map(joined_data, input$mapvar))
})
})
runApp('~/Desktop/INFO/ch16-shiny/exercise-5')
shinyUI(navbarPage(
runApp('~/Desktop/INFO/ch16-shiny/exercise-5')
shinyUI(navbarPage(
shinyUI(navbarPage(
"Electoral College",
# Create a tab panel for your map
tabPanel(
"Map",
titlePanel("Electoral College Votes"),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput(
"mapvar",
label = "Variable to Map",
choices = list(
"Population" = "population",
"Electoral Votes" = "votes",
"Votes / Population" = "ratio"
)
)
),
# Main panel: display plotly map
mainPanel(
plotlyOutput("map")
)
)
),
tabPanel(
"Scatter",
titlePanel("Electoral College Votes"),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput(
"X Variable",
label = "X Variable",
choices = list(
"Population" = "population",
"Electoral Votes" = "votes",
"Votes / Population" = "ratio"
)
)
),
# Main panel: display plotly map
mainPanel(
plotlyOutput("plot")
)
)
)
# Create a tabPanel to show your scatter plot
))
runApp('~/Desktop/INFO/ch16-shiny/exercise-5')
shinyUI(navbarPage(
"Electoral College",
# Create a tab panel for your map
tabPanel(
"Map",
titlePanel("Electoral College Votes"),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput(
"mapvar",
label = "Variable to Map",
choices = list(
"Population" = "population",
"Electoral Votes" = "votes",
"Votes / Population" = "ratio"
)
)
),
# Main panel: display plotly map
mainPanel(
plotlyOutput("map")
)
)
),
tabPanel(
"Scatter",
titlePanel("Electoral College Votes"),
# Create sidebar layout
sidebarLayout(
# Side panel for controls
sidebarPanel(
# Input to select variable to map
selectInput(
"X",
label = "X Variable",
choices = list(
"Population" = "population",
"Electoral Votes" = "votes",
"Votes / Population" = "ratio"
)
),
selectInput(
"Y",
label = "Y Variable",
choices = list(
"Population" = "population",
"Electoral Votes" = "votes",
"Votes / Population" = "ratio"
)
)
),
# Main panel: display plotly map
mainPanel(
plotlyOutput("plot")
)
)
)
# Create a tabPanel to show your scatter plot
))
# Start shinyServer
shinyServer(function(input, output) {
# Render a plotly object that returns your map
output$map <- renderPlotly({
return(build_map(joined_data, input$mapvar))
})
})
runApp('~/Desktop/INFO/ch16-shiny/exercise-5')
# Start shinyServer
shinyServer(function(input, output) {
# Render a plotly object that returns your map
output$map <- renderPlotly({
return(build_map(joined_data, input$mapvar))
})
output$plot <- renderPlotly({
return(build_scatter(joined_data, input$x))
})
})
runApp('~/Desktop/INFO/ch16-shiny/exercise-5')
# Start shinyServer
shinyServer(function(input, output) {
# Render a plotly object that returns your map
output$map <- renderPlotly({
return(build_map(joined_data, input$mapvar))
})
output$plot <- renderPlotly({
return(build_scatter(joined_data, x = input$x, y = input$y))
})
})
runApp('~/Desktop/INFO/ch16-shiny/exercise-5')
runApp('~/Desktop/INFO/ch16-shiny/exercise-5')
runApp('~/Desktop/INFO/ch16-shiny/exercise-5')
